// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/RagOfJoes/puzzlely/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, newConnection, newUser
func (_m *User) Create(ctx context.Context, newConnection entities.Connection, newUser entities.User) (*entities.User, error) {
	ret := _m.Called(ctx, newConnection, newUser)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, entities.Connection, entities.User) *entities.User); ok {
		r0 = rf(ctx, newConnection, newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.Connection, entities.User) error); ok {
		r1 = rf(ctx, newConnection, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type User_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - newConnection entities.Connection
//  - newUser entities.User
func (_e *User_Expecter) Create(ctx interface{}, newConnection interface{}, newUser interface{}) *User_Create_Call {
	return &User_Create_Call{Call: _e.mock.On("Create", ctx, newConnection, newUser)}
}

func (_c *User_Create_Call) Run(run func(ctx context.Context, newConnection entities.Connection, newUser entities.User)) *User_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Connection), args[2].(entities.User))
	})
	return _c
}

func (_c *User_Create_Call) Return(_a0 *entities.User, _a1 error) *User_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *User) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type User_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - id uuid.UUID
func (_e *User_Expecter) Delete(ctx interface{}, id interface{}) *User_Delete_Call {
	return &User_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *User_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *User_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *User_Delete_Call) Return(_a0 error) *User_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, search
func (_m *User) Get(ctx context.Context, search string) (*entities.User, error) {
	ret := _m.Called(ctx, search)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type User_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - search string
func (_e *User_Expecter) Get(ctx interface{}, search interface{}) *User_Get_Call {
	return &User_Get_Call{Call: _e.mock.On("Get", ctx, search)}
}

func (_c *User_Get_Call) Run(run func(ctx context.Context, search string)) *User_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *User_Get_Call) Return(_a0 *entities.User, _a1 error) *User_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetStats provides a mock function with given fields: ctx, id
func (_m *User) GetStats(ctx context.Context, id uuid.UUID) (*entities.Stats, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Stats
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Stats); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Stats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type User_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//  - ctx context.Context
//  - id uuid.UUID
func (_e *User_Expecter) GetStats(ctx interface{}, id interface{}) *User_GetStats_Call {
	return &User_GetStats_Call{Call: _e.mock.On("GetStats", ctx, id)}
}

func (_c *User_GetStats_Call) Run(run func(ctx context.Context, id uuid.UUID)) *User_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *User_GetStats_Call) Return(_a0 *entities.Stats, _a1 error) *User_GetStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWithConnection provides a mock function with given fields: ctx, provider, sub
func (_m *User) GetWithConnection(ctx context.Context, provider string, sub string) (*entities.User, error) {
	ret := _m.Called(ctx, provider, sub)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entities.User); ok {
		r0 = rf(ctx, provider, sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, provider, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetWithConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithConnection'
type User_GetWithConnection_Call struct {
	*mock.Call
}

// GetWithConnection is a helper method to define mock.On call
//  - ctx context.Context
//  - provider string
//  - sub string
func (_e *User_Expecter) GetWithConnection(ctx interface{}, provider interface{}, sub interface{}) *User_GetWithConnection_Call {
	return &User_GetWithConnection_Call{Call: _e.mock.On("GetWithConnection", ctx, provider, sub)}
}

func (_c *User_GetWithConnection_Call) Run(run func(ctx context.Context, provider string, sub string)) *User_GetWithConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *User_GetWithConnection_Call) Return(_a0 *entities.User, _a1 error) *User_GetWithConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, updateUser
func (_m *User) Update(ctx context.Context, updateUser entities.User) (*entities.User, error) {
	ret := _m.Called(ctx, updateUser)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) *entities.User); ok {
		r0 = rf(ctx, updateUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.User) error); ok {
		r1 = rf(ctx, updateUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type User_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - updateUser entities.User
func (_e *User_Expecter) Update(ctx interface{}, updateUser interface{}) *User_Update_Call {
	return &User_Update_Call{Call: _e.mock.On("Update", ctx, updateUser)}
}

func (_c *User_Update_Call) Run(run func(ctx context.Context, updateUser entities.User)) *User_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.User))
	})
	return _c
}

func (_c *User_Update_Call) Return(_a0 *entities.User, _a1 error) *User_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUser(t mockConstructorTestingTNewUser) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
